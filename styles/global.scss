@use 'sass:color';
@use 'breakpoint' as *;
@use 'theme' as *;

// Spacing settings and methods

$spacing-mobile: 1rem;
$spacing-screen: 3.5rem;

@mixin spacing($prop) {
    #{$prop}: $spacing-mobile;
    @include breakpoint(screen) {
        #{$prop}: $spacing-screen;
    }
}

// Top Level

:root {
    font: normal 100% sans-serif;
    font-size: calc(100vw / 22);
    @include breakpoint(screen) {
        font-size: calc(100vw / 50);
    }
    @include breakpoint(omnivision) {
        // Computed size at 'omnivision'
        font-size: 25.58px;
    }
    @include theme(dark) {
        color: white;
    }
}

body {
    @include theme(light) {
        background-color: $color-body-light;
    }
    @include theme(dark) {
        background-color: $color-body-dark;
    }
}

// Global

h1,
h2,
h3,
h4,
h5,
h6 {
    text-rendering: optimizeLegibility;
    line-height: 1;
    font-family: "Open Sans", sans-serif;
    letter-spacing: -0.05em;
    @include theme(light) {
        color: #282828;
    }
    @include theme(dark) {
        color: #d6d6d6;
    }
    a {
        @include theme(light) {
            color: black;
        }
        @include theme(dark) {
            color: white;
        }
    }
}

h1 {
    font-size: 2.5em;
}

a,
.a {
    color: $darkblue;
    text-decoration: none;
    cursor: pointer;
    &:active {
        color: $purple;
    }
    &:hover {
        color: $blue;
        border-color: $blue;
        text-decoration: underline;
    }
    @include theme(dark) {
        color: $blue;
        &:hover {
            color: $lightblue;
            border-color: $lightblue;
        }
    }
}

img {
    max-width: 100%;
    @include theme(dark) {
        // Recolorize photographic images in dark mode
        // @see https://web.dev/prefers-color-scheme/#re-colorize-and-darken-photographic-images
        &:not([src*=".svg"]) {
            filter: grayscale(25%);
        }
    }
}

ul,
ol {
    padding-left: 1.5em;
}
ul ul,
ul ol,
ol ul,
ol ol {
    padding-left: 3em;
}

figure > img,
figure .figure {
    display: block;
    margin-right: auto;
    margin-left: auto;
}

figure figcaption {
    margin: 1em auto;
    text-align: center;
    font-style: italic;
    font-size: 0.9em;
}

@media (min-width: 330px) {
    figure.flex {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
    }
    figure.flex > .figure,
    figure.flex pre {
        flex: initial;
        margin-left: auto;
    }
    figure.flex > figcaption {
        flex: 1;
        text-align: right;
        padding-right: 1em;
    }
}

code,
tt {
    padding: .2em .4em;
    margin: 0;
    font-size: 85%;
    background-color: $pink;
    border-radius: 6px;
    white-space: pre-wrap;
    @include theme(dark) {
        background-color: $color-surface-dark;
    }
}

pre code,
tt {
    font-size: 0.85em;
    font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
    white-space: pre;
    line-height: 1.2;
    background: unset;
    color: unset;
    border: none;
    padding: 0.1em;
}

pre code:before,
tt:before {
    content: counter(linenumbers);
    counter-increment: linenumbers;
    left: -3ex;
    position: absolute;
    text-align: right;
    width: 2.5ex;
}

kbd {
    display: inline-block;
    margin-bottom: 0.4em;
    padding: 1px 8px;
    border: #ccc 1px solid;
    color: #666;
    text-shadow: #fff 0 1px 0;
    font-size: 0.9em;
    font-weight: bold;
    background: #f4f4f4;
    border-radius: 4px;
    box-shadow: 0 1px 0 rgba(0, 0, 0, 0.2), 0 1px 0 0 #fff inset;
}

button {
    cursor: pointer;
    border: 1px solid transparent;
    background-color: transparent;
    &:hover {
        background-color: $color-surface-light;
    }
    &:focus {
        outline: none;
    }
    @include theme(dark) {
        &:hover {
            background-color: $color-surface-dark;
        }
    }

    &[variant="icon"] {
        padding: 0;
        &:hover {
            background-color: transparent;
        }
    }
}

// Outline

#__next {
    > header,
    > section,
    > main,
    > footer {
        box-sizing: border-box;
        max-width: 1280px;
        margin: 0 auto;
        @include spacing(padding-right);
        @include spacing(padding-left);
    }

    > header {
        width: 100%;
        display: flex;
        align-items: center;
        @include spacing(margin-top);
        @include spacing(margin-bottom);

        > picture {
            order: 1;
            margin-left: -32px;
            margin-right: $spacing-mobile;

            @include breakpoint(screen) {
                margin-left: unset;
            }
        }

        > h1 {
            order: 2;
            margin: 0;
            padding: 0;
            line-height: normal;
        }

        > nav {
            display: none;
            order: 3;
            position: relative;

            > ul {
                margin: 0;
                padding: 0;
                list-style-type: none;

                > li {
                    margin: 0;
                    padding: 0;
                    list-style-type: none;

                    &.current {
                        // Denotes current page
                    }
                }
            }
        }
    }

    > main {
        line-height: 1.6;
    }

    > footer {
        position: relative;
        margin-top: $spacing-screen;
        margin-bottom: $spacing-screen;
        line-height: 1.6;

        ul {
            margin: 0;
            padding: 0;
            list-style-type: none;
            display: flex;
            li {
                margin: 0 1em 0 0;
                padding: 0;
                &:first-child {
                    font-weight: bold;
                }
            }
        }

        a.sourcecode {
            text-decoration: none;
            span {
                display: none;
                @extend .a;
                @include breakpoint(screen) {
                    display: unset;
                }
            }
        }
    }
}

#scroll-top {
    position: absolute;
    top: 0;
    right: $spacing-mobile;
    transition: all 0.2s ease-in-out 0s;
    &:hover {
        transform: translateY(-10px);
    }

    svg {
        width: 1.5em;
        height: 1.5em;
    }

    @include breakpoint(omnivision) {
        right: unset;
        left: 0;
    }
    @include theme(dark) {
        svg {
            color: white;
        }
    }
}
